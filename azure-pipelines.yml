# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main
- develop

pool:
  vmImage: 'windows-latest'

variables:
  GitVersion.FullSemVer: ''
  ArtifactNugetName: 'packages-nuget'

stages:
- stage: build
  displayName: 'Build Nuget Package'
  jobs:
  - job: CI_Build
    displayName: 'Nuget - Build, Pack and Test'    
    steps:

    - task: gitversion/setup@0
      inputs:
        versionSpec: '5.x'
      name: GitVersionSetup
      displayName: 'get gitversion tools'
      
    - task: gitversion/execute@0
      name: GetVersion
      displayName: 'get version from repository'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '-c $(BuildConfiguration) --no-restore'

    - task: VSTest@2
      displayName: 'run tests'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*.Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**
          !**\ref\**
        searchFolder: '$(System.DefaultWorkingDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Create nuget packages'
      inputs:
        command: 'pack'
        packagesToPack: 'Capsaicin.RegexUtil/Capsaicin.RegexUtil.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/packages/nuget'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.FullSemVer'

    - publish: '$(Build.ArtifactStagingDirectory)/packages/nuget'
      displayName: 'Publish Artifact: $(ArtifactNugetName)'
      artifact: 'packages-nuget'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- stage: publishpublic
  dependsOn: build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  displayName: 'Nuget - Publish Public Packages'
  jobs:
  - deployment: publishpublic
    displayName: 'Nuget - Publish packages to public feed'
    environment: nuget-publish-public
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: '$(ArtifactNugetName)'
            displayName: 'Download nuget packages'

          # Error: DotNetCore currently does not support using an encrypted Api Key.
          # For more information see https://github.com/microsoft/azure-pipelines-tasks/issues/7160
          #- task: DotNetCoreCLI@2
          #  displayName: "Publish nuget packages to public feed"
          #  inputs:
          #    command: 'push'
          #    packagesToPush: '$(Agent.BuildDirectory)/$(ArtifactNugetName)/*.nupkg'
          #    nuGetFeedType: 'external'
          #    publishFeedCredentials: 'Capsaicin.RegexUtil'
          
          - task: DotNetCoreCLI@2
            displayName: Push Nuget Package
            inputs:
              command: custom
              custom: nuget
              arguments: >
                push $(Agent.BuildDirectory)/$(ArtifactNugetName)/*.nupkg
                -s https://api.nuget.org/v3/index.json
                -k $(NuGetApiKey) # Add your Nuget.org ApiKey as secret variable