# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - main
      - develop

pool:
  vmImage: 'windows-latest'

variables:
  GitVersion.FullSemVer: ''
  ArtifactNugetName: 'packages-nuget'
  ${{ if eq( variables['Build.SourceBranchName'], 'main' ) }}: 
    BuildConfiguration: Release
  ${{ if ne( variables['Build.SourceBranchName'], 'main' ) }}: 
    BuildConfiguration: Debug


stages:
- stage: build
  displayName: 'Build Nuget Package'
  jobs:
  - job: CI_Build
    displayName: 'Nuget - Build, Pack and Test'    
    steps:

    - script: echo $(BuildConfiguration)
      displayName: 'Printing the BuildConfiguration variable'

    - task: gitversion/setup@0
      inputs:
        versionSpec: '5.x'
      name: GitVersionSetup
      displayName: 'get gitversion tools'
      
    - task: gitversion/execute@0
      name: GetVersion
      displayName: 'get version from repository'

    - task: DotNetCoreCLI@2
      displayName: 'Restore packages'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '-c $(BuildConfiguration) --no-restore'

    - task: VSTest@2
      displayName: 'run tests'
      inputs:
        testSelector: 'testAssemblies'
        testAssemblyVer2: |
          **\*.Tests.dll
          !**\*TestAdapter.dll
          !**\obj\**
          !**\ref\**
        searchFolder: '$(System.DefaultWorkingDirectory)'

    - task: DotNetCoreCLI@2
      displayName: 'Create nuget packages'
      inputs:
        command: 'pack'
        packagesToPack: '**/*.csproj;!**/*.Tests.csproj;!**/*.Examples.csproj'
        nobuild: true
        versioningScheme: 'byEnvVar'
        versionEnvVar: 'GitVersion.FullSemVer'

    - task: DotNetCoreCLI@2
      displayName: Push Nuget Package
      inputs:
        command: custom
        custom: nuget
        arguments: >
          push $(Build.ArtifactStagingDirectory)/**/*.nupkg
          -s https://api.nuget.org/v3/index.json
          -k $(NuGetApiKey) # Add your Nuget.org ApiKey as secret variable